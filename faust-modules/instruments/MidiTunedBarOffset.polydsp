declare name "Tuned Bars";
declare author "ER";//From "Tuned Bar" by Romain Michon (rmichon@ccrma.stanford.edu);

import("stdfaust.lib");
instrument = library("instruments.lib");

/* =============== DESCRIPTION ================= :

- Cascading tuned bars
- Head = Silence
- Bottom = Chime
- Left = Low frequencies + slow rhythm
- Right = High frequencies + fast rhythm
- Geiger counter = Chime

*/

//==================== INSTRUMENT =======================

process = tunedBar:>_; 
tunedBar =
		((select-1)*-1) <:
		//nModes resonances with nModes feedbacks for bow table look-up 
		par(i,nModes,(resonance(i,freq_offset,gating)~_)):> + : 
		//Signal Scaling and stereo
		*(15);
//==================== GUI SPECIFICATION ================
N = 10;

//gain = 1;
//gate(n) = position(n) : upfront;

gain = hslider("gain", .2, 0,1, 0.01);
gating = gate*0.5: upfront;
gate = button("gate");
freq = hslider("freq", 100, 40, 1000, 1);
note_offset = hslider("[1]Note offset [acc:.125 0 -1 0 1]", 0, -1, 1, 0.125);
res = hslider("Resonance [acc:.0.001 0.999 0.98 0.995 0.999]", 0.98, 0.98, 0.999, 0.001);

freq_offset = ba.midikey2hz(ba.hz2midikey(freq)+note_offset);

B = hslider("[3]Speed[style:knob][acc:0 1 -10 0 10]", 480, 180, 720, 60): si.smooth(0.99) : min(720) : max(180) : int;
upfront(x) = abs(x-x') > 0;

select = 1;
//----------------------- Frequency Table --------------------



//==================== MODAL PARAMETERS ================

preset = 2;

nMode(2) = 4;

modes(2,0) = 1;
basegains(2,0) = pow(res,1);
excitation(2,0,g) = 1*gain*g/nMode(2);

modes(2,1) = 4.0198391420;
basegains(2,1) = pow(res,2);
excitation(2,1,g) = 1*gain*g/nMode(2);

modes(2,2) = 10.7184986595;
basegains(2,2) = pow(res,3);
excitation(2,2,g) = 1*gain*g/nMode(2);

modes(2,3) = 18.0697050938;
basegains(2,3) = pow(res,4);
excitation(2,3,g) = 1*gain*g/nMode(2);

//==================== SIGNAL PROCESSING ================
//----------------------- Synthesis parameters computing and functions declaration ----------------------------

//the number of modes depends on the preset being used
nModes = nMode(preset);

delayLengthBase(f) = ma.SR/f;

//delay lengths in number of samples
delayLength(x,f) = delayLengthBase(f)/modes(preset,x);

//delay lines
delayLine(x,f) = de.delay(4096,delayLength(x,f));

//Filter bank: fi.bandpass filters (declared in instrument.lib)
radius = 1 - ma.PI*32/ma.SR;
bandPassFilter(x,f) = instrument.bandPass(f*modes(preset,x),radius);
//----------------------- Algorithm implementation ----------------------------

//One resonance
resonance(x,f,g) = + : + (excitation(preset,x,g)*select) : delayLine(x,f) : *(basegains(preset,x)) : bandPassFilter(x,f);
